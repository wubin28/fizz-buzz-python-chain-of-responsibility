============================= test session starts ==============================
platform linux2 -- Python 2.7.5 -- py-1.4.20 -- pytest-2.5.2
collected 4 items

test_fizz_buzz.py FFF.

=================================== FAILURES ===================================
_______ test_it_should_print_the_number_itself_if_it_is_a_normal_number ________

    def test_it_should_print_the_number_itself_if_it_is_a_normal_number():
        # arrange
        fizzbuzz = fizz_buzz_kata.Fizzbuzz()
    
        # act & assert
>       assert fizzbuzz.say(1) == "1"

test_fizz_buzz.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.Fizzbuzz instance at 0x1679b90>, number = 1

    def say(self, number):
        handlerNormalNumber = HandlerNormalNumber(None)
        handlerBuzz = HandlerBuzz(handlerNormalNumber)
        handlerFizz = HandlerFizz(handlerBuzz)
        handlerFizzbuzz = HandlerFizzbuzz(handlerFizz)
>       result = handlerFizzbuzz.handle(number)

fizz_buzz_kata.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.HandlerFizzbuzz instance at 0x1679cf8>, number = 1

    def handle(self, number):
        if number % 15 == 0:
            return "FizzBuzz"
>       super(HandlerFizzbuzz, self).__successor.handle(number)
E       TypeError: must be type, not classobj

fizz_buzz_kata.py:32: TypeError
_____________ test_it_should_print_Fizz_if_it_is_multiple_of_three _____________

    def test_it_should_print_Fizz_if_it_is_multiple_of_three():
        # arrange
        fizzbuzz = fizz_buzz_kata.Fizzbuzz()
    
        # act & assert
>       assert fizzbuzz.say(3) == "Fizz"

test_fizz_buzz.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.Fizzbuzz instance at 0x147cc68>, number = 3

    def say(self, number):
        handlerNormalNumber = HandlerNormalNumber(None)
        handlerBuzz = HandlerBuzz(handlerNormalNumber)
        handlerFizz = HandlerFizz(handlerBuzz)
        handlerFizzbuzz = HandlerFizzbuzz(handlerFizz)
>       result = handlerFizzbuzz.handle(number)

fizz_buzz_kata.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.HandlerFizzbuzz instance at 0x1615170>, number = 3

    def handle(self, number):
        if number % 15 == 0:
            return "FizzBuzz"
>       super(HandlerFizzbuzz, self).__successor.handle(number)
E       TypeError: must be type, not classobj

fizz_buzz_kata.py:32: TypeError
_____________ test_it_should_print_Buzz_if_it_is_multiple_of_five ______________

    def test_it_should_print_Buzz_if_it_is_multiple_of_five():
        # arrange
        fizzbuzz = fizz_buzz_kata.Fizzbuzz()
    
        # act & assert
>       assert fizzbuzz.say(5) == "Buzz"

test_fizz_buzz.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.Fizzbuzz instance at 0x16845f0>, number = 5

    def say(self, number):
        handlerNormalNumber = HandlerNormalNumber(None)
        handlerBuzz = HandlerBuzz(handlerNormalNumber)
        handlerFizz = HandlerFizz(handlerBuzz)
        handlerFizzbuzz = HandlerFizzbuzz(handlerFizz)
>       result = handlerFizzbuzz.handle(number)

fizz_buzz_kata.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fizz_buzz_kata.HandlerFizzbuzz instance at 0x1684680>, number = 5

    def handle(self, number):
        if number % 15 == 0:
            return "FizzBuzz"
>       super(HandlerFizzbuzz, self).__successor.handle(number)
E       TypeError: must be type, not classobj

fizz_buzz_kata.py:32: TypeError
====================== 3 failed, 1 passed in 0.04 seconds ======================
